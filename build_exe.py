#!/usr/bin/env python3
"""
Script de build pour cr√©er un fichier .exe du convertisseur Apple Music vers Spotify
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def clean_build_dirs():
    """Nettoie les dossiers de build pr√©c√©dents"""
    dirs_to_clean = ['build', 'dist', '__pycache__']
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            print(f"Suppression du dossier {dir_name}...")
            shutil.rmtree(dir_name)
    
    # Nettoyer les fichiers .spec
    for spec_file in Path('.').glob('*.spec'):
        print(f"Suppression du fichier {spec_file}...")
        spec_file.unlink()

def build_exe():
    """Construit le fichier .exe avec PyInstaller"""
    print("=== Construction du fichier .exe ===")
    
    # Commande PyInstaller
    cmd = [
        'pyinstaller',
        '--onefile',                    # Un seul fichier .exe
        # '--windowed',                 # Pas de console (optionnel, retirez si vous voulez garder la console)
        '--name=AppleMusic-to-Spotify', # Nom du fichier .exe
        '--icon=icon.ico',              # Ic√¥ne (optionnel, retirez si pas d'ic√¥ne)
        '--add-data=config.env;.',      # Inclure le fichier de config
        '--hidden-import=spotipy',
        '--hidden-import=spotipy.oauth2',
        '--hidden-import=requests',
        '--hidden-import=bs4',
        '--hidden-import=dotenv',
        'index.py'
    ]
    
    # Retirer l'ic√¥ne si elle n'existe pas
    if not os.path.exists('icon.ico'):
        cmd.remove('--icon=icon.ico')
    
    # Retirer --windowed si vous voulez garder la console
    # cmd.remove('--windowed')
    
    print("Commande PyInstaller:", ' '.join(cmd))
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ Build r√©ussi!")
        print("Sortie:", result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print("‚ùå Erreur lors du build:")
        print("Erreur:", e.stderr)
        return False

def create_release_package():
    """Cr√©e un package de release avec les fichiers n√©cessaires"""
    print("\n=== Cr√©ation du package de release ===")
    
    release_dir = "release"
    if os.path.exists(release_dir):
        shutil.rmtree(release_dir)
    os.makedirs(release_dir)
    
    # Copier le .exe
    exe_path = "dist/AppleMusic-to-Spotify.exe"
    if os.path.exists(exe_path):
        shutil.copy2(exe_path, release_dir)
        print(f"‚úÖ {exe_path} copi√© vers {release_dir}")
    else:
        print(f"‚ùå {exe_path} non trouv√©")
        return False
    
    # Copier les fichiers de documentation
    docs_to_copy = ['README.md', 'SETUP.md', '.env-example']
    for doc in docs_to_copy:
        if os.path.exists(doc):
            shutil.copy2(doc, release_dir)
            print(f"‚úÖ {doc} copi√© vers {release_dir}")
    
    # Cr√©er un fichier .env-example dans le release
    env_example_content = """# Configuration Spotify
# Obtenez ces valeurs sur https://developer.spotify.com/dashboard
CLIENT_ID=votre_client_id_ici
CLIENT_SECRET=votre_client_secret_ici
"""
    with open(os.path.join(release_dir, 'config.env'), 'w', encoding='utf-8') as f:
        f.write(env_example_content)
    print("‚úÖ config.env cr√©√© dans le release")
    
    print(f"\nüéâ Package de release cr√©√© dans le dossier '{release_dir}'")
    print("Fichiers inclus:")
    for file in os.listdir(release_dir):
        print(f"  - {file}")
    
    return True

def main():
    print("=== Script de build pour Apple Music to Spotify Converter ===")
    
    # V√©rifier que PyInstaller est install√©
    try:
        import PyInstaller
        print("‚úÖ PyInstaller est install√©")
    except ImportError:
        print("‚ùå PyInstaller n'est pas install√©")
        print("Installez-le avec: pip install pyinstaller")
        return False
    
    # Nettoyer les builds pr√©c√©dents
    clean_build_dirs()
    
    # Construire le .exe
    if not build_exe():
        return False
    
    # Cr√©er le package de release
    if not create_release_package():
        return False
    
    print("\nüéâ Build termin√© avec succ√®s!")
    print("Le fichier .exe se trouve dans le dossier 'release'")
    print("Vous pouvez maintenant cr√©er une release GitHub avec ce dossier")

if __name__ == "__main__":
    main() 